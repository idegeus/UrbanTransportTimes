services:

  # Receives and distributes current city request, and manages flow. 
  manage_inator:
    build: . # 2-dockers/manage_inator.dockerfile
    entrypoint: ['python', './2-dockers/manage_inator.py']
    ports: 
      - 80:80
    volumes: 
      - ./1-data:/1-data
      - ./2-util:/2-util

  # Create population center dataframes and bounding boxes for requested locations. 
  # popcenter_inator:
  #   build: ./2-dockers/generic
  #   entrypoint: ['python', './2-dockers/popcenter_inator.py']
  #   volumes: 
  #     - ./1-data:/1-data
  #   depends_on:
  #     manage_inator:
  #       condition: service_started

  # # Fetch OSM data and make extracts for requested locations.
  # osm_inator:
  #   build: ./2-dockers/generic
  #   entrypoint: ['python', './2-dockers/osm_inator.py']
  #   volumes: 
  #     - ./1-data:/1-data
  #   depends_on:
  #     manage_inator:
  #       condition: service_started
  #     popcenter_inator:
  #       condition: service_completed_successfully

  # # Fetch all possible GTFS feeds for requested locations.
  # gtfs_inator:
  #   build: ./2-dockers/generic
  #   entrypoint: ['python', './2-dockers/gtfs_inator.py']
  #   volumes: 
  #     - ./1-data:/1-data
  #   depends_on:
  #     popcenter_inator:
  #       condition: service_completed_successfully
  #     manage_inator:
  #       condition: service_started

  # # Isochrone generator
  # graphhopper_inator:
  #   image: "israelhikingmap/graphhopper"
  #   volumes: 
  #     - ./1-data:/1-data
  #   # It could be that this snapshot will have to be changed, depending on the version downloaded. 
  #   entrypoint: ['java', '-Xmx14g', '-Xms14g', '-jar', '/graphhopper/graphhopper-web-8.0-SNAPSHOT.jar', 'server', '/1-data/2-gh/config-duttv2.yml']
  #   ports: 
  #     - 8989:8989
  #   depends_on:
  #     gtfs_inator:
  #       condition: service_completed_successfully
  #     osm_inator:
  #       condition: service_completed_successfully
  #     manage_inator:
  #       condition: service_started

  # # Requests the isochrones from the Isochrone generator, signals back to the manager when done so another round can be performed.
  # isochrone_inator:
  #   build: ./2-dockers/generic
  #   entrypoint: ['python', './2-dockers/isochrone_inator.py']
  #   volumes: 
  #     - ./1-data:/1-data
  #   depends_on:
  #     graphhopper_inator:
  #       condition: service_started
  #     manage_inator:
  #       condition: service_started
  